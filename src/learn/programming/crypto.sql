


SELECT HASHBYTES('SHA2_256','something')

SELECT CONVERT(VARCHAR(64), HASHBYTES('SHA2_256', 'something'), 1) AS HashValue;


SELECT CONVERT(BIGINT, 0x79BE667E);

SELECT CONVERT(BIGINT, HASHBYTES('SHA2_256', 'something'));


-- elliptic curve points

DECLARE @A VARBINARY(MAX) = 0x0000000000000000000000000000000000000000000000000000000000000000;
DECLARE @B VARBINARY(MAX) = 0x0000000000000000000000000000000000000000000000000000000000000007; 

DECLARE @P VARBINARY(MAX) = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F;
DECLARE @N VARBINARY(MAX) = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;

DECLARE @Gx VARBINARY(MAX) = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798
SELECT DATALENGTH(@Gx) AS [Length in Bytes];
--SELECT @Gx AS [Gx Point];

DECLARE @first8bytes VARBINARY(8) = SUBSTRING(@Gx, 1, 8);

SELECT CAST(CAST(@first8bytes AS BIGINT) AS DECIMAL(20, 0)) AS DecimalValue;
----

DECLARE @GxInt BIGINT = CAST(@Gx AS BIGINT);
SELECT @GxInt;



DECLARE @Gy VARBINARY(MAX) = 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8
SELECT @Gy AS [Gy Point]


DECLARE @GyInt BIGINT = CAST(@Gy AS BIGINT)



-- บวก
DECLARE @Sum BIGINT = @GxInt + @GyInt;

-- แสดงผล
SELECT 
    @GxInt AS Gx_Int,
    @GyInt AS Gy_Int,
    @Sum AS Sum_Int,
    CAST(@Sum AS VARBINARY(8)) AS Sum_Hex;


CREATE TABLE secp256K1 (
	A VARBINARY(MAX),
	B VARBINARY(MAX),
	P VARBINARY(MAX),
	N VARBINARY(MAX),
    Gx VARBINARY(MAX),
    Gy VARBINARY(MAX)
);

INSERT INTO secp256K1 (A, B, P, N, Gx, Gy)
VALUES (@A, @B, @P, @N, @Gx, @Gy);

-- Retrieve stored values
SELECT * FROM secp256K1;


